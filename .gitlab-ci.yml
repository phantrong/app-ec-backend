stages:
  - checkConvention
  - checkSonarqube
  - deployStaging
  - deployDev
  - deployProduct

checkConvention:
  stage: checkConvention
  image: composer
  script:
    - curl -OL https://squizlabs.github.io/PHP_CodeSniffer/phpcs.phar && curl -OL https://squizlabs.github.io/PHP_CodeSniffer/phpcbf.phar
    - mv phpcs.phar /usr/local/bin/phpcs && chmod +x /usr/local/bin/phpcs
    - mv phpcbf.phar /usr/local/bin/phpcbf && chmod +x /usr/local/bin/phpcbf
    - phpcs --standard=PSR2 app/ config/ database/ routes/

checkSonarqube:
  stage: checkSonarqube
  image:
    name: sonarsource/sonar-scanner-cli:latest
    entrypoint: [""]
  variables:
    SONAR_USER_HOME: "${CI_PROJECT_DIR}/.sonar" # Defines the location of the analysis task cache
    GIT_DEPTH: "0" # Tells git to fetch all the branches of the project, required by the analysis task
  cache:
    key: "${CI_JOB_NAME}"
    paths:
      - .sonar/cache
  script:
    - sonar-scanner
  allow_failure: true
  only:
    - develop
    - staging

deployProduct:
  stage: deployProduct
  only:
    - product
  tags:
    - product-runner
  script:
    - rm -rf /home/ubuntu/lcm-backend/database/migrations
    - cp -r app bootstrap config database lang nodejs public resources routes storage stubs artisan Dockerfile composer.json composer.lock package.json phpunit.xml webpack.mix.js load_font.php sazanami-mincho.ttf  /home/ubuntu/lcm-backend
    - cd /home/ubuntu/lcm-backend
    - composer install
    - php artisan migrate
    - php artisan optimize
    - php artisan view:clear
    - php artisan config:cache

deployStaging:
  stage: deployStaging
  only:
    - staging
  tags:
    - staging-runner
  script:
    - rm -rf /home/ubuntu/lcm-backend/database/migrations
    - cp -r app bootstrap config database lang nodejs public resources routes storage stubs artisan Dockerfile composer.json composer.lock package.json phpunit.xml webpack.mix.js load_font.php sazanami-mincho.ttf  /home/ubuntu/lcm-backend
    - cd /home/ubuntu/lcm-backend
    - composer install
    - php artisan migrate
    - php artisan optimize
    - php artisan view:clear
    - php artisan config:clear

deployDev:
  stage: deployDev
  only:
    - develop
  tags:
    - develop
  script:
    - rm -rf /var/www/live_ecommerce/backend/database/migrations
    - cp -r ./* /var/www/live_ecommerce/backend
    - cd /var/www/live_ecommerce/backend
    - docker-compose exec -T php composer install
    - docker-compose exec -T php php artisan migrate
    - docker-compose exec -T php php artisan optimize
    - docker-compose exec -T php php artisan cache:clear
    - docker-compose exec -T php php artisan config:cache
